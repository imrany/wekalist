// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: store/user_setting.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "wekalist.store";

export interface UserSetting {
  userId: number;
  key: UserSetting_Key;
  general?: GeneralUserSetting | undefined;
  sessions?: SessionsUserSetting | undefined;
  accessTokens?: AccessTokensUserSetting | undefined;
  shortcuts?: ShortcutsUserSetting | undefined;
  webhooks?: WebhooksUserSetting | undefined;
}

export enum UserSetting_Key {
  KEY_UNSPECIFIED = "KEY_UNSPECIFIED",
  /** GENERAL - General user settings. */
  GENERAL = "GENERAL",
  /** SESSIONS - User authentication sessions. */
  SESSIONS = "SESSIONS",
  /** ACCESS_TOKENS - Access tokens for the user. */
  ACCESS_TOKENS = "ACCESS_TOKENS",
  /** SHORTCUTS - The shortcuts of the user. */
  SHORTCUTS = "SHORTCUTS",
  /** WEBHOOKS - The webhooks of the user. */
  WEBHOOKS = "WEBHOOKS",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function userSetting_KeyFromJSON(object: any): UserSetting_Key {
  switch (object) {
    case 0:
    case "KEY_UNSPECIFIED":
      return UserSetting_Key.KEY_UNSPECIFIED;
    case 1:
    case "GENERAL":
      return UserSetting_Key.GENERAL;
    case 2:
    case "SESSIONS":
      return UserSetting_Key.SESSIONS;
    case 3:
    case "ACCESS_TOKENS":
      return UserSetting_Key.ACCESS_TOKENS;
    case 4:
    case "SHORTCUTS":
      return UserSetting_Key.SHORTCUTS;
    case 5:
    case "WEBHOOKS":
      return UserSetting_Key.WEBHOOKS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserSetting_Key.UNRECOGNIZED;
  }
}

export function userSetting_KeyToNumber(object: UserSetting_Key): number {
  switch (object) {
    case UserSetting_Key.KEY_UNSPECIFIED:
      return 0;
    case UserSetting_Key.GENERAL:
      return 1;
    case UserSetting_Key.SESSIONS:
      return 2;
    case UserSetting_Key.ACCESS_TOKENS:
      return 3;
    case UserSetting_Key.SHORTCUTS:
      return 4;
    case UserSetting_Key.WEBHOOKS:
      return 5;
    case UserSetting_Key.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface GeneralUserSetting {
  /** The user's locale. */
  locale: string;
  /** The user's appearance setting. */
  appearance: string;
  /** The user's memo visibility setting. */
  memoVisibility: string;
  /**
   * The user's theme preference.
   * This references a CSS file in the web/public/themes/ directory.
   */
  theme: string;
  /** Allows user to receive push notifications if allowed */
  enableNotifications: boolean;
  /** This is the wrapper api key */
  wrapperApiKey: string;
  /** This is the wrapper usage counter */
  wrapperUsageCounter: number;
  /** This is the maximum wrapper usage */
  wrapperMaxUsage: number;
}

export interface SessionsUserSetting {
  sessions: SessionsUserSetting_Session[];
}

export interface SessionsUserSetting_Session {
  /** Unique session identifier. */
  sessionId: string;
  /** Timestamp when the session was created. */
  createTime?:
    | Date
    | undefined;
  /**
   * Timestamp when the session was last accessed.
   * Used for sliding expiration calculation (last_accessed_time + 2 weeks).
   */
  lastAccessedTime?:
    | Date
    | undefined;
  /** Client information associated with this session. */
  clientInfo?: SessionsUserSetting_ClientInfo | undefined;
}

export interface SessionsUserSetting_ClientInfo {
  /** User agent string of the client. */
  userAgent: string;
  /** IP address of the client. */
  ipAddress: string;
  /** Optional. Device type (e.g., "mobile", "desktop", "tablet"). */
  deviceType: string;
  /** Optional. Operating system (e.g., "iOS 17.0", "Windows 11"). */
  os: string;
  /** Optional. Browser name and version (e.g., "Chrome 119.0"). */
  browser: string;
}

export interface AccessTokensUserSetting {
  accessTokens: AccessTokensUserSetting_AccessToken[];
}

export interface AccessTokensUserSetting_AccessToken {
  /**
   * The access token is a JWT token.
   * Including expiration time, issuer, etc.
   */
  accessToken: string;
  /** A description for the access token. */
  description: string;
}

export interface ShortcutsUserSetting {
  shortcuts: ShortcutsUserSetting_Shortcut[];
}

export interface ShortcutsUserSetting_Shortcut {
  id: string;
  title: string;
  filter: string;
}

export interface WebhooksUserSetting {
  webhooks: WebhooksUserSetting_Webhook[];
}

export interface WebhooksUserSetting_Webhook {
  /** Unique identifier for the webhook */
  id: string;
  /** Descriptive title for the webhook */
  title: string;
  /** The webhook URL endpoint */
  url: string;
}

function createBaseUserSetting(): UserSetting {
  return {
    userId: 0,
    key: UserSetting_Key.KEY_UNSPECIFIED,
    general: undefined,
    sessions: undefined,
    accessTokens: undefined,
    shortcuts: undefined,
    webhooks: undefined,
  };
}

export const UserSetting: MessageFns<UserSetting> = {
  encode(message: UserSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.key !== UserSetting_Key.KEY_UNSPECIFIED) {
      writer.uint32(16).int32(userSetting_KeyToNumber(message.key));
    }
    if (message.general !== undefined) {
      GeneralUserSetting.encode(message.general, writer.uint32(26).fork()).join();
    }
    if (message.sessions !== undefined) {
      SessionsUserSetting.encode(message.sessions, writer.uint32(34).fork()).join();
    }
    if (message.accessTokens !== undefined) {
      AccessTokensUserSetting.encode(message.accessTokens, writer.uint32(42).fork()).join();
    }
    if (message.shortcuts !== undefined) {
      ShortcutsUserSetting.encode(message.shortcuts, writer.uint32(50).fork()).join();
    }
    if (message.webhooks !== undefined) {
      WebhooksUserSetting.encode(message.webhooks, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.key = userSetting_KeyFromJSON(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.general = GeneralUserSetting.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sessions = SessionsUserSetting.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.accessTokens = AccessTokensUserSetting.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.shortcuts = ShortcutsUserSetting.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.webhooks = WebhooksUserSetting.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UserSetting>): UserSetting {
    return UserSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserSetting>): UserSetting {
    const message = createBaseUserSetting();
    message.userId = object.userId ?? 0;
    message.key = object.key ?? UserSetting_Key.KEY_UNSPECIFIED;
    message.general = (object.general !== undefined && object.general !== null)
      ? GeneralUserSetting.fromPartial(object.general)
      : undefined;
    message.sessions = (object.sessions !== undefined && object.sessions !== null)
      ? SessionsUserSetting.fromPartial(object.sessions)
      : undefined;
    message.accessTokens = (object.accessTokens !== undefined && object.accessTokens !== null)
      ? AccessTokensUserSetting.fromPartial(object.accessTokens)
      : undefined;
    message.shortcuts = (object.shortcuts !== undefined && object.shortcuts !== null)
      ? ShortcutsUserSetting.fromPartial(object.shortcuts)
      : undefined;
    message.webhooks = (object.webhooks !== undefined && object.webhooks !== null)
      ? WebhooksUserSetting.fromPartial(object.webhooks)
      : undefined;
    return message;
  },
};

function createBaseGeneralUserSetting(): GeneralUserSetting {
  return {
    locale: "",
    appearance: "",
    memoVisibility: "",
    theme: "",
    enableNotifications: false,
    wrapperApiKey: "",
    wrapperUsageCounter: 0,
    wrapperMaxUsage: 0,
  };
}

export const GeneralUserSetting: MessageFns<GeneralUserSetting> = {
  encode(message: GeneralUserSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.locale !== "") {
      writer.uint32(10).string(message.locale);
    }
    if (message.appearance !== "") {
      writer.uint32(18).string(message.appearance);
    }
    if (message.memoVisibility !== "") {
      writer.uint32(26).string(message.memoVisibility);
    }
    if (message.theme !== "") {
      writer.uint32(34).string(message.theme);
    }
    if (message.enableNotifications !== false) {
      writer.uint32(40).bool(message.enableNotifications);
    }
    if (message.wrapperApiKey !== "") {
      writer.uint32(50).string(message.wrapperApiKey);
    }
    if (message.wrapperUsageCounter !== 0) {
      writer.uint32(56).int32(message.wrapperUsageCounter);
    }
    if (message.wrapperMaxUsage !== 0) {
      writer.uint32(64).int32(message.wrapperMaxUsage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GeneralUserSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGeneralUserSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.locale = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.appearance = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.memoVisibility = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.theme = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.enableNotifications = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.wrapperApiKey = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.wrapperUsageCounter = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.wrapperMaxUsage = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GeneralUserSetting>): GeneralUserSetting {
    return GeneralUserSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GeneralUserSetting>): GeneralUserSetting {
    const message = createBaseGeneralUserSetting();
    message.locale = object.locale ?? "";
    message.appearance = object.appearance ?? "";
    message.memoVisibility = object.memoVisibility ?? "";
    message.theme = object.theme ?? "";
    message.enableNotifications = object.enableNotifications ?? false;
    message.wrapperApiKey = object.wrapperApiKey ?? "";
    message.wrapperUsageCounter = object.wrapperUsageCounter ?? 0;
    message.wrapperMaxUsage = object.wrapperMaxUsage ?? 0;
    return message;
  },
};

function createBaseSessionsUserSetting(): SessionsUserSetting {
  return { sessions: [] };
}

export const SessionsUserSetting: MessageFns<SessionsUserSetting> = {
  encode(message: SessionsUserSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sessions) {
      SessionsUserSetting_Session.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionsUserSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionsUserSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessions.push(SessionsUserSetting_Session.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SessionsUserSetting>): SessionsUserSetting {
    return SessionsUserSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SessionsUserSetting>): SessionsUserSetting {
    const message = createBaseSessionsUserSetting();
    message.sessions = object.sessions?.map((e) => SessionsUserSetting_Session.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSessionsUserSetting_Session(): SessionsUserSetting_Session {
  return { sessionId: "", createTime: undefined, lastAccessedTime: undefined, clientInfo: undefined };
}

export const SessionsUserSetting_Session: MessageFns<SessionsUserSetting_Session> = {
  encode(message: SessionsUserSetting_Session, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.lastAccessedTime !== undefined) {
      Timestamp.encode(toTimestamp(message.lastAccessedTime), writer.uint32(26).fork()).join();
    }
    if (message.clientInfo !== undefined) {
      SessionsUserSetting_ClientInfo.encode(message.clientInfo, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionsUserSetting_Session {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionsUserSetting_Session();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lastAccessedTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.clientInfo = SessionsUserSetting_ClientInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SessionsUserSetting_Session>): SessionsUserSetting_Session {
    return SessionsUserSetting_Session.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SessionsUserSetting_Session>): SessionsUserSetting_Session {
    const message = createBaseSessionsUserSetting_Session();
    message.sessionId = object.sessionId ?? "";
    message.createTime = object.createTime ?? undefined;
    message.lastAccessedTime = object.lastAccessedTime ?? undefined;
    message.clientInfo = (object.clientInfo !== undefined && object.clientInfo !== null)
      ? SessionsUserSetting_ClientInfo.fromPartial(object.clientInfo)
      : undefined;
    return message;
  },
};

function createBaseSessionsUserSetting_ClientInfo(): SessionsUserSetting_ClientInfo {
  return { userAgent: "", ipAddress: "", deviceType: "", os: "", browser: "" };
}

export const SessionsUserSetting_ClientInfo: MessageFns<SessionsUserSetting_ClientInfo> = {
  encode(message: SessionsUserSetting_ClientInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userAgent !== "") {
      writer.uint32(10).string(message.userAgent);
    }
    if (message.ipAddress !== "") {
      writer.uint32(18).string(message.ipAddress);
    }
    if (message.deviceType !== "") {
      writer.uint32(26).string(message.deviceType);
    }
    if (message.os !== "") {
      writer.uint32(34).string(message.os);
    }
    if (message.browser !== "") {
      writer.uint32(42).string(message.browser);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionsUserSetting_ClientInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionsUserSetting_ClientInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.deviceType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.os = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.browser = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SessionsUserSetting_ClientInfo>): SessionsUserSetting_ClientInfo {
    return SessionsUserSetting_ClientInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SessionsUserSetting_ClientInfo>): SessionsUserSetting_ClientInfo {
    const message = createBaseSessionsUserSetting_ClientInfo();
    message.userAgent = object.userAgent ?? "";
    message.ipAddress = object.ipAddress ?? "";
    message.deviceType = object.deviceType ?? "";
    message.os = object.os ?? "";
    message.browser = object.browser ?? "";
    return message;
  },
};

function createBaseAccessTokensUserSetting(): AccessTokensUserSetting {
  return { accessTokens: [] };
}

export const AccessTokensUserSetting: MessageFns<AccessTokensUserSetting> = {
  encode(message: AccessTokensUserSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.accessTokens) {
      AccessTokensUserSetting_AccessToken.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessTokensUserSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessTokensUserSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessTokens.push(AccessTokensUserSetting_AccessToken.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AccessTokensUserSetting>): AccessTokensUserSetting {
    return AccessTokensUserSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccessTokensUserSetting>): AccessTokensUserSetting {
    const message = createBaseAccessTokensUserSetting();
    message.accessTokens = object.accessTokens?.map((e) => AccessTokensUserSetting_AccessToken.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAccessTokensUserSetting_AccessToken(): AccessTokensUserSetting_AccessToken {
  return { accessToken: "", description: "" };
}

export const AccessTokensUserSetting_AccessToken: MessageFns<AccessTokensUserSetting_AccessToken> = {
  encode(message: AccessTokensUserSetting_AccessToken, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== "") {
      writer.uint32(10).string(message.accessToken);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessTokensUserSetting_AccessToken {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessTokensUserSetting_AccessToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AccessTokensUserSetting_AccessToken>): AccessTokensUserSetting_AccessToken {
    return AccessTokensUserSetting_AccessToken.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccessTokensUserSetting_AccessToken>): AccessTokensUserSetting_AccessToken {
    const message = createBaseAccessTokensUserSetting_AccessToken();
    message.accessToken = object.accessToken ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseShortcutsUserSetting(): ShortcutsUserSetting {
  return { shortcuts: [] };
}

export const ShortcutsUserSetting: MessageFns<ShortcutsUserSetting> = {
  encode(message: ShortcutsUserSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.shortcuts) {
      ShortcutsUserSetting_Shortcut.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShortcutsUserSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShortcutsUserSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.shortcuts.push(ShortcutsUserSetting_Shortcut.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ShortcutsUserSetting>): ShortcutsUserSetting {
    return ShortcutsUserSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ShortcutsUserSetting>): ShortcutsUserSetting {
    const message = createBaseShortcutsUserSetting();
    message.shortcuts = object.shortcuts?.map((e) => ShortcutsUserSetting_Shortcut.fromPartial(e)) || [];
    return message;
  },
};

function createBaseShortcutsUserSetting_Shortcut(): ShortcutsUserSetting_Shortcut {
  return { id: "", title: "", filter: "" };
}

export const ShortcutsUserSetting_Shortcut: MessageFns<ShortcutsUserSetting_Shortcut> = {
  encode(message: ShortcutsUserSetting_Shortcut, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShortcutsUserSetting_Shortcut {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShortcutsUserSetting_Shortcut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ShortcutsUserSetting_Shortcut>): ShortcutsUserSetting_Shortcut {
    return ShortcutsUserSetting_Shortcut.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ShortcutsUserSetting_Shortcut>): ShortcutsUserSetting_Shortcut {
    const message = createBaseShortcutsUserSetting_Shortcut();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseWebhooksUserSetting(): WebhooksUserSetting {
  return { webhooks: [] };
}

export const WebhooksUserSetting: MessageFns<WebhooksUserSetting> = {
  encode(message: WebhooksUserSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.webhooks) {
      WebhooksUserSetting_Webhook.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebhooksUserSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebhooksUserSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.webhooks.push(WebhooksUserSetting_Webhook.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<WebhooksUserSetting>): WebhooksUserSetting {
    return WebhooksUserSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WebhooksUserSetting>): WebhooksUserSetting {
    const message = createBaseWebhooksUserSetting();
    message.webhooks = object.webhooks?.map((e) => WebhooksUserSetting_Webhook.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWebhooksUserSetting_Webhook(): WebhooksUserSetting_Webhook {
  return { id: "", title: "", url: "" };
}

export const WebhooksUserSetting_Webhook: MessageFns<WebhooksUserSetting_Webhook> = {
  encode(message: WebhooksUserSetting_Webhook, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.url !== "") {
      writer.uint32(26).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebhooksUserSetting_Webhook {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebhooksUserSetting_Webhook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.url = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<WebhooksUserSetting_Webhook>): WebhooksUserSetting_Webhook {
    return WebhooksUserSetting_Webhook.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WebhooksUserSetting_Webhook>): WebhooksUserSetting_Webhook {
    const message = createBaseWebhooksUserSetting_Webhook();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.url = object.url ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
