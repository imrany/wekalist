// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: store/subscription.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "wekalist.subcription";

export interface SubcriptionPayload {
  endpoint: string;
  username: string;
  email: string;
  keys: { [key: string]: string };
}

export interface SubcriptionPayload_KeysEntry {
  key: string;
  value: string;
}

function createBaseSubcriptionPayload(): SubcriptionPayload {
  return { endpoint: "", username: "", email: "", keys: {} };
}

export const SubcriptionPayload: MessageFns<SubcriptionPayload> = {
  encode(message: SubcriptionPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpoint !== "") {
      writer.uint32(10).string(message.endpoint);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    Object.entries(message.keys).forEach(([key, value]) => {
      SubcriptionPayload_KeysEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubcriptionPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubcriptionPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = SubcriptionPayload_KeysEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.keys[entry4.key] = entry4.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SubcriptionPayload>): SubcriptionPayload {
    return SubcriptionPayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubcriptionPayload>): SubcriptionPayload {
    const message = createBaseSubcriptionPayload();
    message.endpoint = object.endpoint ?? "";
    message.username = object.username ?? "";
    message.email = object.email ?? "";
    message.keys = Object.entries(object.keys ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseSubcriptionPayload_KeysEntry(): SubcriptionPayload_KeysEntry {
  return { key: "", value: "" };
}

export const SubcriptionPayload_KeysEntry: MessageFns<SubcriptionPayload_KeysEntry> = {
  encode(message: SubcriptionPayload_KeysEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubcriptionPayload_KeysEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubcriptionPayload_KeysEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SubcriptionPayload_KeysEntry>): SubcriptionPayload_KeysEntry {
    return SubcriptionPayload_KeysEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubcriptionPayload_KeysEntry>): SubcriptionPayload_KeysEntry {
    const message = createBaseSubcriptionPayload_KeysEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
