// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: api/v1/ai_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Status } from "../../google/rpc/status";

export const protobufPackage = "wekalist.api.v1";

export interface GenAiRequest {
  /** User prompt for AI generation */
  prompt: string;
}

export interface GenAiResponse {
  /** Original user prompt */
  prompt: string;
  /** AI generated response */
  response: string;
  /** Optional: structured error info */
  status?: Status | undefined;
}

function createBaseGenAiRequest(): GenAiRequest {
  return { prompt: "" };
}

export const GenAiRequest: MessageFns<GenAiRequest> = {
  encode(message: GenAiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.prompt !== "") {
      writer.uint32(10).string(message.prompt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenAiRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenAiRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.prompt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GenAiRequest>): GenAiRequest {
    return GenAiRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenAiRequest>): GenAiRequest {
    const message = createBaseGenAiRequest();
    message.prompt = object.prompt ?? "";
    return message;
  },
};

function createBaseGenAiResponse(): GenAiResponse {
  return { prompt: "", response: "", status: undefined };
}

export const GenAiResponse: MessageFns<GenAiResponse> = {
  encode(message: GenAiResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.prompt !== "") {
      writer.uint32(10).string(message.prompt);
    }
    if (message.response !== "") {
      writer.uint32(18).string(message.response);
    }
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenAiResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenAiResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.prompt = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.response = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GenAiResponse>): GenAiResponse {
    return GenAiResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenAiResponse>): GenAiResponse {
    const message = createBaseGenAiResponse();
    message.prompt = object.prompt ?? "";
    message.response = object.response ?? "";
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    return message;
  },
};

export type AiServiceDefinition = typeof AiServiceDefinition;
export const AiServiceDefinition = {
  name: "AiService",
  fullName: "wekalist.api.v1.AiService",
  methods: {
    genAi: {
      name: "GenAi",
      requestType: GenAiRequest,
      requestStream: false,
      responseType: GenAiResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([19, 58, 6, 112, 114, 111, 109, 112, 116, 34, 9, 47, 118, 49, 47, 103, 101, 110, 97, 105]),
          ],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
