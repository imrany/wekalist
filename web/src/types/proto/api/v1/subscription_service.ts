// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: api/v1/subscription_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Status } from "../../google/rpc/status";

export const protobufPackage = "wekalist.api.v1";

export interface SubscriptionRequest {
  endpoint: string;
  username: string;
  email: string;
  keys: { [key: string]: string };
}

export interface SubscriptionRequest_KeysEntry {
  key: string;
  value: string;
}

export interface RemoveSubscriptionRequest {
  endpoint: string;
  username: string;
}

export interface SubscriptionResponse {
  success: boolean;
  message: string;
  status?: Status | undefined;
}

export interface SendNotificationRequest {
  username: string;
  email: string;
  payload?: NotificationPayload | undefined;
  sendToAll: boolean;
  sendToAllExcept: string;
}

export interface NotificationPayload {
  title: string;
  body: string;
  icon: string;
  badge: string;
  url: string;
  data: { [key: string]: string };
}

export interface NotificationPayload_DataEntry {
  key: string;
  value: string;
}

export interface SendNotificationResponse {
  success: boolean;
  message: string;
  recipientsCount: number;
}

function createBaseSubscriptionRequest(): SubscriptionRequest {
  return { endpoint: "", username: "", email: "", keys: {} };
}

export const SubscriptionRequest: MessageFns<SubscriptionRequest> = {
  encode(message: SubscriptionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpoint !== "") {
      writer.uint32(10).string(message.endpoint);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    Object.entries(message.keys).forEach(([key, value]) => {
      SubscriptionRequest_KeysEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscriptionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscriptionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = SubscriptionRequest_KeysEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.keys[entry4.key] = entry4.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SubscriptionRequest>): SubscriptionRequest {
    return SubscriptionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubscriptionRequest>): SubscriptionRequest {
    const message = createBaseSubscriptionRequest();
    message.endpoint = object.endpoint ?? "";
    message.username = object.username ?? "";
    message.email = object.email ?? "";
    message.keys = Object.entries(object.keys ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseSubscriptionRequest_KeysEntry(): SubscriptionRequest_KeysEntry {
  return { key: "", value: "" };
}

export const SubscriptionRequest_KeysEntry: MessageFns<SubscriptionRequest_KeysEntry> = {
  encode(message: SubscriptionRequest_KeysEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscriptionRequest_KeysEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscriptionRequest_KeysEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SubscriptionRequest_KeysEntry>): SubscriptionRequest_KeysEntry {
    return SubscriptionRequest_KeysEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubscriptionRequest_KeysEntry>): SubscriptionRequest_KeysEntry {
    const message = createBaseSubscriptionRequest_KeysEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseRemoveSubscriptionRequest(): RemoveSubscriptionRequest {
  return { endpoint: "", username: "" };
}

export const RemoveSubscriptionRequest: MessageFns<RemoveSubscriptionRequest> = {
  encode(message: RemoveSubscriptionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpoint !== "") {
      writer.uint32(10).string(message.endpoint);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveSubscriptionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveSubscriptionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveSubscriptionRequest>): RemoveSubscriptionRequest {
    return RemoveSubscriptionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveSubscriptionRequest>): RemoveSubscriptionRequest {
    const message = createBaseRemoveSubscriptionRequest();
    message.endpoint = object.endpoint ?? "";
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseSubscriptionResponse(): SubscriptionResponse {
  return { success: false, message: "", status: undefined };
}

export const SubscriptionResponse: MessageFns<SubscriptionResponse> = {
  encode(message: SubscriptionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscriptionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscriptionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SubscriptionResponse>): SubscriptionResponse {
    return SubscriptionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubscriptionResponse>): SubscriptionResponse {
    const message = createBaseSubscriptionResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    return message;
  },
};

function createBaseSendNotificationRequest(): SendNotificationRequest {
  return { username: "", email: "", payload: undefined, sendToAll: false, sendToAllExcept: "" };
}

export const SendNotificationRequest: MessageFns<SendNotificationRequest> = {
  encode(message: SendNotificationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.payload !== undefined) {
      NotificationPayload.encode(message.payload, writer.uint32(26).fork()).join();
    }
    if (message.sendToAll !== false) {
      writer.uint32(32).bool(message.sendToAll);
    }
    if (message.sendToAllExcept !== "") {
      writer.uint32(42).string(message.sendToAllExcept);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendNotificationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendNotificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.payload = NotificationPayload.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.sendToAll = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.sendToAllExcept = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SendNotificationRequest>): SendNotificationRequest {
    return SendNotificationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendNotificationRequest>): SendNotificationRequest {
    const message = createBaseSendNotificationRequest();
    message.username = object.username ?? "";
    message.email = object.email ?? "";
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? NotificationPayload.fromPartial(object.payload)
      : undefined;
    message.sendToAll = object.sendToAll ?? false;
    message.sendToAllExcept = object.sendToAllExcept ?? "";
    return message;
  },
};

function createBaseNotificationPayload(): NotificationPayload {
  return { title: "", body: "", icon: "", badge: "", url: "", data: {} };
}

export const NotificationPayload: MessageFns<NotificationPayload> = {
  encode(message: NotificationPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.body !== "") {
      writer.uint32(18).string(message.body);
    }
    if (message.icon !== "") {
      writer.uint32(26).string(message.icon);
    }
    if (message.badge !== "") {
      writer.uint32(34).string(message.badge);
    }
    if (message.url !== "") {
      writer.uint32(42).string(message.url);
    }
    Object.entries(message.data).forEach(([key, value]) => {
      NotificationPayload_DataEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotificationPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotificationPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.badge = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          const entry6 = NotificationPayload_DataEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.data[entry6.key] = entry6.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<NotificationPayload>): NotificationPayload {
    return NotificationPayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NotificationPayload>): NotificationPayload {
    const message = createBaseNotificationPayload();
    message.title = object.title ?? "";
    message.body = object.body ?? "";
    message.icon = object.icon ?? "";
    message.badge = object.badge ?? "";
    message.url = object.url ?? "";
    message.data = Object.entries(object.data ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseNotificationPayload_DataEntry(): NotificationPayload_DataEntry {
  return { key: "", value: "" };
}

export const NotificationPayload_DataEntry: MessageFns<NotificationPayload_DataEntry> = {
  encode(message: NotificationPayload_DataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotificationPayload_DataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotificationPayload_DataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<NotificationPayload_DataEntry>): NotificationPayload_DataEntry {
    return NotificationPayload_DataEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NotificationPayload_DataEntry>): NotificationPayload_DataEntry {
    const message = createBaseNotificationPayload_DataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseSendNotificationResponse(): SendNotificationResponse {
  return { success: false, message: "", recipientsCount: 0 };
}

export const SendNotificationResponse: MessageFns<SendNotificationResponse> = {
  encode(message: SendNotificationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.recipientsCount !== 0) {
      writer.uint32(24).int32(message.recipientsCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendNotificationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendNotificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.recipientsCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SendNotificationResponse>): SendNotificationResponse {
    return SendNotificationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendNotificationResponse>): SendNotificationResponse {
    const message = createBaseSendNotificationResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    message.recipientsCount = object.recipientsCount ?? 0;
    return message;
  },
};

export type SubscriptionServiceDefinition = typeof SubscriptionServiceDefinition;
export const SubscriptionServiceDefinition = {
  name: "SubscriptionService",
  fullName: "wekalist.api.v1.SubscriptionService",
  methods: {
    addSubscription: {
      name: "AddSubscription",
      requestType: SubscriptionRequest,
      requestStream: false,
      responseType: SubscriptionResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([18, 58, 1, 42, 34, 13, 47, 118, 49, 47, 115, 117, 98, 115, 99, 114, 105, 98, 101]),
          ],
        },
      },
    },
    removeSubscription: {
      name: "RemoveSubscription",
      requestType: RemoveSubscriptionRequest,
      requestStream: false,
      responseType: SubscriptionResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              37,
              90,
              20,
              58,
              1,
              42,
              34,
              15,
              47,
              118,
              49,
              47,
              117,
              110,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              98,
              101,
              42,
              13,
              47,
              118,
              49,
              47,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              98,
              101,
            ]),
          ],
        },
      },
    },
    sendNotification: {
      name: "SendNotification",
      requestType: SendNotificationRequest,
      requestStream: false,
      responseType: SendNotificationResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              27,
              58,
              1,
              42,
              34,
              22,
              47,
              118,
              49,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              115,
              101,
              110,
              100,
            ]),
          ],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
